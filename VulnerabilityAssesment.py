import os
from color import*
import Logo
import os.path

global DracOS
DracOS = c('[','green')+c('DracOS','red')+c(']> ','green')

def VulnAs():
    os.system('clear')
    Logo.logo_11()
    print(G(""" 
    1.  BBQSQL
    2.  BED
    3.  Cisco-Auditing-Tool
    4.  Cisco-Global-Exploiter
    5.  Cisco-ocs
    6.  cisco-torch
    7.  copy-router-config
    8.  Doona
    9.  DotDotPwn
    10. HexorBase(error)
    11. jSQL Injection
    12. Lynis
    13. Nmap
    14. ohrwurm
    15. openvas
    16. Oscanner
    17. Powerfuzzer(error)
    18. SidGuesser
    19. SIPArmyKnife
    20. sqlmap
    21. sqlninja
    22. sqlsus
    23. THC-IPV6
    24. tnscmd10g
    25. unix-privesc-check
    26. Yersinia
    0. back"""))
    print('00. exit')
    
    menu = input(DracOS)    # DracOS dari variabel global
    # panggil tools di dalam kondisi
    if menu == '1':
        bbqsql()
    elif menu == '2':
        bed()
    elif menu == '3':
        cat()
    elif menu == '4':
        cge()
    elif menu == '5':
        cisco_ocs()
    elif menu == '6':
        cisco_torch()
    elif menu == '7':
        copy_router_config()
    elif menu == '8':
        Doona()
    elif menu == '9':
        DotDotPwn()
    # elif menu == '10':
        
    elif menu == '11':
        jsql()
    elif menu == '12':
        lynis()
    elif menu == '13':
        nmap()
    elif menu == '14':
        ohrwurm()
    elif menu == '15':
        openvas()
    elif menu == '16':
        oscanner()
    # elif menu == '17':

    # elif menu == '18':

    # elif menu == '19':

    # elif menu == '20':

    # elif menu == '21':

    # elif menu == '22':
    
    # elif menu == '23':
    
    # elif menu == '24':

    # elif menu == '25':

    # elif menu == '26':
        
    elif menu == '0':
        os.system('python3 $HOME/git/DracOS_VENOMIZER/venomizer.py')
    elif menu == '00':
        exit()

# Tambah fungsi tools lalu panggil ke dalam fungsi VulnAs()
# BBSQL
def bbqsql():
    if os.path.isfile('/usr/bin/bbqsql'):
        os.system('clear')
        print(B('tools Available'))
    else:
        os.system(
            'xterm -T "☣ INSTALL NMAP ☣" -geometry 100x30 -e "sudo apt install bbsql"'
        )
        os.system("clear")
        print(B("BBQSQL Already Installed"))
        input()
    # End BBSQL

# BED
def bed():
    if os.path.isfile('/usr/bin/bed'):
        os.system('clear')
        print(B('Tools Available'))
    else:
        os.system(""" 
        xterm -T " INSTALL BED " -geometry 100x30 -e "sudo apt install bed" """)
        os.system('clear')
        print(B('BED Already Installed'))
        input()
        # End BED

# cisco-auditing-tool
def cat():
    if os.path.isfile('/usr/bin/cat'):
        os.system('clear')
        print(B('Tools Available'))
    else:
        os.system(""" 
        xterm -T " INSTALL CAT " -geometry 100x30 -e "sudo apt install cisco-auditing-tool" """)
        print(B('CAT Already Installed'))
        input()
        # End cisco-auditing-tool

# cisco-global-exploiter
def cge():
    if os.path.isfile('/usr/bin/cge.pl'):
        os.system('clear')
        print(B('Tools Available'))
    else:
        os.system(""" 
        xterm -T " INSTALL CISCO-GLOBAL-EXPLOITER " -geometry 100x30 -e "sudo apt install cisco-global-exploiter" """)
        print(B('cge Already Installed'))
        # end cisco-global-exploiter

# cisco-ocs
def cisco_ocs():
    if os.path.isfile('/usr/bin/cisco-ocs'):
        os.sytem('clear')
        print(B('Tools Available'))
    else:
        os.system(""" 
        xterm -T " INSTALL CISCO-OCS " -geometry 100x30 -e "sudo apt install cisco-ocs " """)
        print(B('cisco-ocs Already Installed'))
        # end cisco-ocs

# cisco-torch
def cisco_torch():
    if os.path.isfile('/usr/bin/cisco-torch'):
        os.system('clear')
        print(B('Tools Available'))
    else:
        os.system(""" 
        xterm -T " INSTALL CISCO-TORCH " -geometry 100x30 -e "sudo apt install cisco-torch" """)
        print(B('cisco-torch Already Installed'))

# copy-router-config
def copy_router_config():
    if os.path.isfile('/usr/bin/copy-router/config.pl'):
        os.system('clear')
        print(B('Tools Available'))
    else:
        os.system(""" 
        xterm -T " INSTALL COPY-ROUTER " -geometry 100x30 -e "sudo apt install copy-router-config" """)
        print(B('copy-router-config Already Installed'))

# Doona
def Doona():
    if os.path.isfile('/usr/bin/doona'):
        os.system('clear')
        print(B('Tool Available'))
    else:
        os.system(""" 
        xterm -T " INSTALL DOONA " -geometry 100x30 -e "sudo apt install Doona" """)
        print(B('Doona Already Installed'))
        # end Doona

# DotDotPwn
def DotDotPwn():
    if os.path.isfile('/usr/bin/dotdotpwn.pl'):
        os.system('clear')
        print(B('Tool Available'))
    else:
        os.system(""" 
        xterm -T " INSTALL DOTDOTPWN " -geometry -e "sudo apt install dotdotpwn" """)
        print(B('DotDotPwn Already Installed'))
        # end DotDotPwn

# HexorBase
def HexorBase():
    if os.path.isfile('/usr/bin/hexorbase'):
        os.system('clear')
        print(B('Tool Available'))
    else:
        os.system(
            'xterm -T " INSTALL HEXORBASE " -geometry 100x30 -e "sudo apt install hexorbase"'
        )
        print(B('hexorbase Already Installed'))

# jSQL Injection
def jsql():
    if os.path.isfile('/usr/bin/jsql'):
        os.system('clear')
        print(B('Tool Available'))
    else:
        os.system(
            'xterm -T " INSTALL JSQL " -geometry 100x30 -e "sudo apt install jsql"'
        )
        print(B('jSQL Already Installed'))
        # end jSQL Injection

# Lynis
def lynis():
    if os.path.isfile('/usr/bin/lynis'):
        os.system('clear')
        print(B('Tool Available'))
    else:
        os.system(
            'xterm -T " INSTALL LYNIS " -geometry 100x30 -e "sudo apt install lynis"'
        )
        print(B('Lynis Already Installed'))

# Nmap
def nmap():
    if os.path.isfile('/usr/bin/nmap'):
        os.system('clear')
        print(B('Tool Available'))
    else:
        os.system(
            'xterm -T " INSTALL NMAP " -geometry 100x30 -e "sudo apt install nmap"'
        )
        print(B('Nmap Already Installed'))
        # end Nmap

# ohrwurm
def ohrwurm():
    if os.path.isfile('/usr/bin/ohrwurm'):
        os.system('clear')
        print(B('Tool Available'))
    else:
        os.system(
            'xterm -T " INSTALL OHRWURM " -geometry 100x30 -e "sudo apt install ohrwurm"'
        )
        print(B('ohrwurm Already Installed'))
        # end ohrwurm

# openvas
def openvas():
    if os.path.isfile('/usr/bin/openvas'):
        os.system('clear')
        print(B('Tool Available'))
    else:
        os.system(
            'xterm -T " INSTALL OPENVAS " -geometry 100x30 -e "sudo apt install openvas"'
        )
        print(B('openvas Already Installed'))
        # end openvas

# Oscanner
def Oscanner():
    if os.path.isfile('/usr/bin/oscanner'):
        os.system('clear')
        print(B('Tool Available'))
    else:
        os.system(
            'xterm -T " INSTALL OSCANNER " -geometry 100x30 -e "sudo apt install oscanner"'
        )
        print(B('Oscanner Already Installed'))
        # end oscanner

# Powerfuzzer
def Powerfuzzer():
    if os.path.isfile('/usr/bin/powerfuzzer'):
        os.system('clear')
        print(B('Tool Available'))
    else:
        os.system(
            'xterm -T " INSTALL POWERFUZZER " -geometry 100x30 -e "git clone https://gitlab.com/kalilinux/packages/powerfuzzer.git"'
        )
        print(B('powerfuzzer Already Installed'))
        # end powerfuzzer

# SidGuesser
def SidGuesser():
    if os.path.isfile('/usr/bin/sidguess'):
        os.system('clear')
        print(B('Tool Available'))
    else:
        os.system(
            'xterm -T " INSTALL SIDGUESSER " -geometry 100x30 -e "sudo apt install sidguesser"'
    )
        print(B('sidguesser Already Installed'))
        # end sidguesser

# SIPArmyKnife
def SIPArmyKnife():
    if os.path.isfile('/usr/bin/siparmyknife'):
        os.system('clear')
        print(B('tool Available'))
    else:
        os.system(
            'xterm -T " INSTALL SIPARMYKNIFE " -gemoetry 100x30 -e "sudo apt install siparmyknife"'
        )
        print(B('siparmyknife Already Installed'))
        # end siparmyknife

# sqlmap
def sqlmap():
    if os.path.isfile('/usr/bin/sqlmap'):
        os.system('clear')
        print(B('Tool Available'))
    else:
        os.system(
            'xterm -T " INSTALL SQLMAP " -geometry 100x30 -e "sudo apt install sqlmap"'
        )
        print(B('sqlmap Already Installed'))
        # end sqlmap

# sqlninja
def sqlninja():
    if os.path.isfile('/usr/bin/sqlninja'):
        os.system('clear')
        print(B('Tool Available'))
    else:
        os.system(
            'xterm -T " INSTALL SQLNINJA " -geometry 100x30 -e "sudo apt install sqlninja"'
        )
        print(B('sqlninja Already Installed'))

# sqlsus
def sqlsus():
    if os.path.isfile('/usr/bin/sqlsus'):
        os.system('clear')
        print(B('Tool Available'))
    else:
        os.system(
            'xterm -T " INSTALL SQLSUS " -geometry 100x30 -e "sudo apt install sqlsus"'
        )
        print(B('sqlsus Already Installed'))
        # end sqlsus

# THC-IPV6
def thc_ipv6():
    if os.path.isfile('/usr/bin/'):
        os.system('clear')
        print(B('Tool Available'))
    else:
        os.system(
            'xterm -T " INSTALL THC-IPV6 " -geometry 100x30 -e "sudo apt install "'
        )
        print(B('THC-IPV6 Already Installed'))
        # end THC-IPV6

# tnscmd10g
def tnscmd10g():
    if os.path.isfile('/usr/bin/tnscmd10g'):
        os.system('clear')
        print(B('Tool Available'))
    else:
        os.system(
            'xterm -T " INSTALL TNSCMD10G " -geometry 100x30 -e "sudo apt install tnscmd10g"'
        )
        print(B(' Already Installed'))
        # end tnscmd10g

# unix-privesc-check
def unix():
    if os.path.isfile('/usr/bin/'):
        os.system('clear')
        print(B('Tool Available'))
    else:
        os.system(
            'xterm -T " INSTALL UNIX-PRIVESC-CHECK " -geometry 100x30 -e "sudo apt install "'
        )
        print(B(' Already Installed'))
        # end unix-privesc-check

# Yersinia
def Yersinia():
    if os.path.isfile('/usr/bin/'):
        os.system('clear')
        print(B('Tool Available'))
    else:
        os.system(
            'xterm -T " INSTALL  " -geometry 100x30 -e "sudo apt install "'
        )
        print(B(' Already Installed'))
        # end yersinia
        
while True:
    VulnAs()