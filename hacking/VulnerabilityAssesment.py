import os
from color import*
import os.path
# from termcolor import colored as c
import Logo

# global DracOS
# DracOS = c('[','green')+c('DracOS','red')+c(']> ','green')
os.system('clear')
def VulnAs():
    os.system('clear')
    Logo.logo_11()
    print(G(
    '1.  BBQSQL\n'
    '2.  BED\n'
    '3.  Cisco-Auditing-Tool\n'
    '4.  Cisco-Global-Exploiter\n'
    '5.  Cisco-ocs\n'
    '6.  cisco-torch\n'
    '7.  copy-router-config\n'
    '8.  Doona\n'
    '9.  DotDotPwn\n'
    '10. HexorBase(error)\n'
    '11. jSQL Injection\n'
    '12. Lynis\n'
    '13. Nmap\n'
    '14. ohrwurm\n'
    '15. openvas\n'
    '16. Oscanner\n'
    '17. Powerfuzzer(error)\n'
    '18. SidGuesser\n'
    '19. SIPArmyKnife\n'
    '20. sqlmap\n'
    '21. sqlninja\n'
    '22. sqlsus\n'
    '23. THC-IPV6(error)\n'
    '24. tnscmd10g\n'
    '25. unix-privesc-check\n'
    '26. Yersinia\n'
    '0. back'))
    print('00. exit')
    
    menu = input(G('[')+R('DracOS')+G(']select> '))
    # panggil tools di dalam kondisi
    if menu == '1':
        bbqsql()
    elif menu == '2':
        os.system('clear')
        bed()
        os.system('clear')
    elif menu == '3':
        cat()
    elif menu == '4':
        cge()
    elif menu == '5':
        cisco_ocs()
    elif menu == '6':
        cisco_torch()
    elif menu == '7':
        copy_router_config()
    elif menu == '8':
        Doona()
    elif menu == '9':
        DotDotPwn()
    # elif menu == '10':
        
    elif menu == '11':
        jsql()
    elif menu == '12':
        lynis()
    elif menu == '13':
        nmap()
    elif menu == '14':
        ohrwurm()
    elif menu == '15':
        openvas()
    elif menu == '16':
        Oscanner()
    # elif menu == '17':

    elif menu == '18':
        SidGuesser()
    elif menu == '19':
        SIPArmyKnife()
    elif menu == '20':
        sqlmap()
    elif menu == '21':
        sqlninja()
    elif menu == '22':
        sqlsus()
    # elif menu == '23':
        
    elif menu == '24':
        tnscmd10g()
    # elif menu == '25':

    elif menu == '26':
        Yersinia()
    elif menu == '0':
        os.system('python3 /usr/bin/DracOS_VENOMIZER/venomizer.py')
    elif menu == '00':
        exit()

# Tambah fungsi tools lalu panggil ke dalam fungsi VulnAs()
# BBSQL
def bbqsql():
    if os.path.isfile('/usr/bin/bbqsql'):
        os.system('clear')
        print(B('tools Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T "☣ INSTALL NMAP ☣" -geometry 100x30 -e "sudo apt install bbsql"'
        )
        os.system("clear")
        print(B("BBQSQL Already Installed"))
        input()
        back()
    # End BBSQL

# BED
def bed():
    if os.path.isfile('/usr/bin/bed') or os.path.isfile('/usr/share/bed'):
        os.system('clear')
        print(B('Tools Available'))
        input()
        back()
    else:
        os.system(
        'xterm -T "☣ INSTALL BED ☣" -geometry 100x30 -e "sudo apt install bed"')
        os.system('clear')
        print(B('BED Already Installed'))
        input()
        back()
        # End BED

# cisco-auditing-tool
def cat():
    if os.path.isfile('/usr/bin/cat'):
        os.system('clear')
        print(B('Tools Available'))
        input()
        back()
    else:
        os.system(""" 
        xterm -T " INSTALL CAT " -geometry 100x30 -e "sudo apt install cisco-auditing-tool" """)
        print(B('CAT Already Installed'))
        input()
        back()
        # End cisco-auditing-tool

# cisco-global-exploiter
def cge():
    if os.path.isfile('/usr/bin/cge.pl'):
        os.system('clear')
        print(B('Tools Available'))
        input()
    else:
        os.system(""" 
        xterm -T " INSTALL CISCO-GLOBAL-EXPLOITER " -geometry 100x30 -e "sudo apt install cisco-global-exploiter" """)
        print(B('cge Already Installed'))
        input()
        back()
        # end cisco-global-exploiter

# cisco-ocs
def cisco_ocs():
    if os.path.isfile('/usr/bin/cisco-ocs'):
        os.system('clear')
        print(B('Tools Available'))
        input()
        back()
    else:
        os.system(""" 
        xterm -T " INSTALL CISCO-OCS " -geometry 100x30 -e "sudo apt install cisco-ocs " """)
        print(B('cisco-ocs Already Installed'))
        input()
        back()
        # end cisco-ocs

# cisco-torch
def cisco_torch():
    if os.path.isfile('/usr/bin/cisco-torch'):
        os.system('clear')
        print(B('Tools Available'))
        input()
        back()
    else:
        os.system(""" 
        xterm -T " INSTALL CISCO-TORCH " -geometry 100x30 -e "sudo apt install cisco-torch" """)
        print(B('cisco-torch Already Installed'))
        input()
        back()

# copy-router-config
def copy_router_config():
    if os.path.isfile('/usr/bin/copy-router/config.pl'):
        os.system('clear')
        print(B('Tools Available'))
        input()
        back()
    else:
        os.system(""" 
        xterm -T " INSTALL COPY-ROUTER " -geometry 100x30 -e "sudo apt install copy-router-config" """)
        print(B('copy-router-config Already Installed'))
        input()
        back()

# Doona
def Doona():
    if os.path.isfile('/usr/bin/doona'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(""" 
        xterm -T " INSTALL DOONA " -geometry 100x30 -e "sudo apt install Doona" """)
        print(B('Doona Already Installed'))
        input()
        back()
        # end Doona

# DotDotPwn
def DotDotPwn():
    if os.path.isfile('/usr/bin/dotdotpwn.pl'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(""" 
        xterm -T " INSTALL DOTDOTPWN " -geometry -e "sudo apt install dotdotpwn" """)
        print(B('DotDotPwn Already Installed'))
        input()
        back()
        # end DotDotPwn

# HexorBase
def HexorBase():
    if os.path.isfile('/usr/bin/hexorbase'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL HEXORBASE " -geometry 100x30 -e "sudo apt install hexorbase"'
        )
        print(B('hexorbase Already Installed'))
        input()
        back()

# jSQL Injection
def jsql():
    if os.path.isfile('/usr/bin/jsql'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL JSQL " -geometry 100x30 -e "sudo apt install jsql"'
        )
        print(B('jSQL Already Installed'))
        input()
        back()
        # end jSQL Injection

# Lynis
def lynis():
    if os.path.isfile('/usr/bin/lynis'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL LYNIS " -geometry 100x30 -e "sudo apt install lynis"'
        )
        print(B('Lynis Already Installed'))
        input()
        back()
# Nmap
def nmap():
    if os.path.isfile('/usr/bin/nmap'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL NMAP " -geometry 100x30 -e "sudo apt install nmap"'
        )
        print(B('Nmap Already Installed'))
        input()
        back()
        # end Nmap

# ohrwurm
def ohrwurm():
    if os.path.isfile('/usr/bin/ohrwurm'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL OHRWURM " -geometry 100x30 -e "sudo apt install ohrwurm"'
        )
        print(B('ohrwurm Already Installed'))
        input()
        back()
        # end ohrwurm

# openvas
def openvas():
    if os.path.isfile('/usr/bin/openvas'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL OPENVAS " -geometry 100x30 -e "sudo apt install openvas"'
        )
        print(B('openvas Already Installed'))
        input()
        back()
        # end openvas

# Oscanner
def Oscanner():
    if os.path.isfile('/usr/bin/oscanner'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL OSCANNER " -geometry 100x30 -e "sudo apt install oscanner"'
        )
        print(B('Oscanner Already Installed'))
        input()
        back()
        # end oscanner

# Powerfuzzer
def Powerfuzzer():
    if os.path.isfile('/usr/bin/powerfuzzer'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL POWERFUZZER " -geometry 100x30 -e "git clone https://gitlab.com/kalilinux/packages/powerfuzzer.git"'
        )
        print(B('powerfuzzer Already Installed'))
        input()
        back()
        # end powerfuzzer

# SidGuesser
def SidGuesser():
    if os.path.isfile('/usr/bin/sidguess'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL SIDGUESSER " -geometry 100x30 -e "sudo apt install sidguesser"'
    )
        print(B('sidguesser Already Installed'))
        input()
        back()
        # end sidguesser

# SIPArmyKnife
def SIPArmyKnife():
    if os.path.isfile('/usr/bin/siparmyknife'):
        os.system('clear')
        print(B('tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL SIPARMYKNIFE " -gemoetry 100x30 -e "sudo apt install siparmyknife"'
        )
        print(B('siparmyknife Already Installed'))
        input()
        back()
        # end siparmyknife

# sqlmap
def sqlmap():
    if os.path.isfile('/usr/bin/sqlmap'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL SQLMAP " -geometry 100x30 -e "sudo apt install sqlmap"'
        )
        print(B('sqlmap Already Installed'))
        input()
        back()
        # end sqlmap

# sqlninja
def sqlninja():
    if os.path.isfile('/usr/bin/sqlninja'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL SQLNINJA " -geometry 100x30 -e "sudo apt install sqlninja"'
        )
        print(B('sqlninja Already Installed'))
        input()
        back()

# sqlsus
def sqlsus():
    if os.path.isfile('/usr/bin/sqlsus'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL SQLSUS " -geometry 100x30 -e "sudo apt install sqlsus"'
        )
        print(B('sqlsus Already Installed'))
        input()
        back()
        # end sqlsus

# THC-IPV6
def thc_ipv6():
    if os.path.isfile('/usr/bin/'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL THC-IPV6 " -geometry 100x30 -e "sudo apt install "'
        )
        print(B('THC-IPV6 Already Installed'))
        input()
        back()
        # end THC-IPV6

# tnscmd10g
def tnscmd10g():
    if os.path.isfile('/usr/bin/tnscmd10g'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL TNSCMD10G " -geometry 100x30 -e "sudo apt install tnscmd10g"'
        )
        print(B(' Already Installed'))
        input()
        back()
        # end tnscmd10g

# unix-privesc-check
def unix():
    if os.path.isfile('/usr/bin/'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL UNIX-PRIVESC-CHECK " -geometry 100x30 -e "sudo apt install "'
        )
        print(B(' Already Installed'))
        input()
        back()
        # end unix-privesc-check

# Yersinia
def Yersinia():
    if os.path.isfile('/usr/bin/'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL  " -geometry 100x30 -e "sudo apt install "'
        )
        print(B(' Already Installed'))
        input()
        back()
        # end yersinia

def back():
    VulnAs()