import os
from color import*
import os.path
# from termcolor import colored as c
import Logo

# global DracOS
# DracOS = c('[','green')+c('DracOS','red')+c(']> ','green')
os.system('clear')
def VulnAs():
    os.system('clear')
    Logo.logo_11()

    lists = ('bed','cisco-auditing-tool','cisco-global-exploiter','cisco-ocs','cisco-torch','copy-router-config','Doona',
    'dotdotpwn','hexorbase','jsql','lynis','nmap','ohrwurm','openvas','oscanner','sidguesser','siparmyknife','sqlmap','sqlninja',
    'sqlsus','tnscmd10g','unix','yersinia')
    
    list_tool(lists)
    print(G('     101. back'))
    print(R('     102. exit'))
    
    menu = int(input(G('[')+R('DracOS')+G(']select> ')))
    if menu in range(len(lists)):
        menu -= 1
        vulnerability_tool(lists[menu])
    elif menu == 101:
        os.system('python3 /usr/bin/DracOS_VENOMIZER/venomizer.py')
    elif menu == 102:
        exit()
    else:
        print(R('Wrong input!'))
    input()
    back()

def list_tool(a):
    num = 0
    for x in range(len(a)):
        num += 1
        if os.path.isfile(f'/usr/bin/{a[x]}'):
            print(G(f'[{num}] {a[x]}'))
        else:
            print(R(f'[{num}] {a[x]}'))

# Tambah fungsi tools lalu panggil ke dalam fungsi VulnAs()
# BBSQL
def vulnerability_tool(a):
    if os.path.isfile(f'/usr/bin/{a}'):
        os.system('clear')
        print(B('tools Available'))
        input()
        # back()
    else:
        os.system(
            f'xterm -T "☣ INSTALL {a} ☣" -geometry 100x30 -e "sudo apt install {a}"'
        )
        os.system("clear")
        if os.path.isfile(f'/usr/bin/{a}'):
            print(B(f'{a} Installed'))
        else:
            print(R(f'{a} Not Installed'))
        input()
    back()
        # End BBSQL

# BED
def bed():
    if os.path.isfile('/usr/bin/bed') or os.path.isfile('/usr/share/bed'):
        os.system('clear')
        print(B('Tools Available'))
        input()
        # back()
    else:
        os.system(
        'xterm -T "☣ INSTALL BED ☣" -geometry 100x30 -e "sudo apt install bed"')
        os.system('clear')
        if os.path.isfile('/usr/bin/bed') or os.path.isfile('/usr/share/bed'):
            print(B('bed Installed'))
        else:
            print(R('bed Not Installed'))
        input()
    back()
        # End BED

# cisco-auditing-tool
def cat():
    if os.path.isfile('/usr/bin/cat'):
        os.system('clear')
        print(B('Tools Available'))
        input()
        # back()
    else:
        os.system(""" 
        xterm -T " INSTALL CAT " -geometry 100x30 -e "sudo apt install cisco-auditing-tool" """)
        os.system('clear')
        if os.path.isfile('/usr/bin/cat'):
            print(B('cisco-auditing-tool Installed'))
        else:
            print(R('cisco-auditing-tool Not Installed'))
        input()
    back()
        # End cisco-auditing-tool

# cisco-global-exploiter
def cge():
    if os.path.isfile('/usr/bin/cge.pl'):
        os.system('clear')
        print(B('Tools Available'))
        input()
    else:
        os.system(""" 
        xterm -T " INSTALL CISCO-GLOBAL-EXPLOITER " -geometry 100x30 -e "sudo apt install cisco-global-exploiter" """)
        os.system('clear')
        if os.path.isfile('/usr/bin/cge.pl'):
            print(B('cisco-global-exploiter Installed'))
        else:
            print(R('cisco-global-exploiter Not Installed'))
        input()
    back()
        # end cisco-global-exploiter

# cisco-ocs
def cisco_ocs():
    if os.path.isfile('/usr/bin/cisco-ocs'):
        os.system('clear')
        print(B('Tools Available'))
        input()
    else:
        os.system(""" 
        xterm -T " INSTALL CISCO-OCS " -geometry 100x30 -e "sudo apt install cisco-ocs " """)
        os.system('clear')
        if os.path.isfile('/usr/bin/cisco-ocs'):
            print(B('cisco-ocs Installed'))
        else:
            print(R('cisco-ocs Not Installed'))
        input()
    back()
        # end cisco-ocs

# cisco-torch
def cisco_torch():
    if os.path.isfile('/usr/bin/cisco-torch'):
        os.system('clear')
        print(B('Tools Available'))
        input()
        # back()
    else:
        os.system(""" 
        xterm -T " INSTALL CISCO-TORCH " -geometry 100x30 -e "sudo apt install cisco-torch" """)
        os.system('clear')
        if os.path.isfile('/usr/bin/cisco-torch'):
            print(B('cisco-torch Installed'))
        else:
            print(R('cisco-torch Not Installed'))
        input()
    back()

# copy-router-config
def copy_router_config():
    if os.path.isfile('/usr/bin/copy-router/config.pl'):
        os.system('clear')
        print(B('Tools Available'))
        input()
        # back()
    else:
        os.system(""" 
        xterm -T " INSTALL COPY-ROUTER " -geometry 100x30 -e "sudo apt install copy-router-config" """)
        os.system('clear')
        if os.path.isfile('/usr/bin/copy-router/config.pl'):
            print(B('copy-router-config Installed'))
        else:
            print(R('copy-router-config Not Installed'))
        input()
    back()

# Doona
def Doona():
    if os.path.isfile('/usr/bin/doona'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        # back()
    else:
        os.system(""" 
        xterm -T " INSTALL DOONA " -geometry 100x30 -e "sudo apt install Doona" """)
        os.system('clear')
        if os.path.isfile('/usr/bin/doona'):
            print(B('Doona Installed'))
        else:
            print(R('Doona Not Installed'))
        input()
    back()
        # end Doona

# DotDotPwn
def DotDotPwn():
    if os.path.isfile('/usr/bin/dotdotpwn.pl'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        # back()
    else:
        os.system(""" 
        xterm -T " INSTALL DOTDOTPWN " -geometry -e "sudo apt install dotdotpwn" """)
        os.system('clear')
        if os.path.isfile('/usr/bin/dotdotpwn.pl'):
            print(B('DotDotPwn Installed'))
        else:
            print(R('DotDotPwn Not Installed'))
        input()
    back()
        # end DotDotPwn

# HexorBase
def HexorBase():
    if os.path.isfile('/usr/bin/hexorbase'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        # back()
    else:
        os.system(
            'xterm -T " INSTALL HEXORBASE " -geometry 100x30 -e "sudo apt install hexorbase"'
        )
        os.system('clear')
        if os.path.isfile('/usr/bin/hexorbase'):
            print(B('HexorBase Installed'))
        else:
            print(R('HexorBase Not Installed'))
        input()
    back()

# jSQL Injection
def jsql():
    if os.path.isfile('/usr/bin/jsql'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        # back()
    else:
        os.system(
            'xterm -T " INSTALL JSQL " -geometry 100x30 -e "sudo apt install jsql"'
        )
        os.system("clear")
        if os.path.isfile('/usr/bin/jsql'):
            print(B('jsql Installed'))
        input()
    back()
        # end jSQL Injection

# Lynis
def lynis():
    if os.path.isfile('/usr/bin/lynis'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        # back()
    else:
        os.system(
            'xterm -T " INSTALL LYNIS " -geometry 100x30 -e "sudo apt install lynis"'
        )
        os.system("clear")
        if os.path.isfile('/usr/bin/lynis'):
            print(B('lynis Installed'))
        else:
            print(R('lynis Not Installed'))
        input()
    back()
# Nmap
def nmap():
    if os.path.isfile('/usr/bin/nmap'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        # back()
    else:
        os.system(
            'xterm -T " INSTALL NMAP " -geometry 100x30 -e "sudo apt install nmap"'
        )
        os.system("clear")
        if os.path.isfile('/usr/bin/nmap'):
            print(B('nmap Installed'))
        else:
            print(R('nmap Not Installed'))
        input()
    back()
        # end Nmap

# ohrwurm
def ohrwurm():
    if os.path.isfile('/usr/bin/ohrwurm'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        # back()
    else:
        os.system(
            'xterm -T " INSTALL OHRWURM " -geometry 100x30 -e "sudo apt install ohrwurm"'
        )
        os.system("clear")
        if os.path.isfile('/usr/bin/ohrwurm'):
            print(B('ohrwurm Installed'))
        else:
            print(R('ohrwurm Not Installed'))
        input()
    back()
        # end ohrwurm

# openvas
def openvas():
    if os.path.isfile('/usr/sbin/openvas') or os.path.isfile('/etc/openvas') or os.path.isfile('/usr/share/openvas'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        # back()
    else:
        os.system(
            'xterm -T " INSTALL OPENVAS " -geometry 100x30 -e "sudo apt install openvas"'
        )
        os.system("clear")
        if os.path.isfile('/usr/sbin/openvas') or os.path.isfile('/etc/openvas') or os.path.isfile('/usr/share/openvas'):
            print(B('openvas Installed'))
        else:
            print(R('openvas Not Installed'))
        input()
    back()
        # end openvas

# Oscanner
def Oscanner():
    if os.path.isfile('/usr/bin/oscanner'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        # back()
    else:
        os.system(
            'xterm -T " INSTALL OSCANNER " -geometry 100x30 -e "sudo apt install oscanner"'
        )
        os.system("clear")
        if os.path.isfile('/usr/bin/oscanner'):
            print(B('oscanner Installed'))
        else:
            print(R('oscanner Not Installed'))
        input()
    back()
        # end oscanner

# Powerfuzzer
def Powerfuzzer():
    if os.path.isfile('/usr/bin/powerfuzzer'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        # back()
    else:
        os.system(
            'xterm -T " INSTALL POWERFUZZER " -geometry 100x30 -e "git clone https://gitlab.com/kalilinux/packages/powerfuzzer.git"'
        )
        os.system("clear")
        if os.path.isfile('/usr/bin/powerfuzzer'):
            print(B('powerfuzzer Installed'))
        else:
            print(R('powerfuzzer Not Installed'))
        input()
    back()
        # end powerfuzzer

# SidGuesser
def SidGuesser():
    if os.path.isfile('/usr/bin/sidguess'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        # back()
    else:
        os.system(
            'xterm -T " INSTALL SIDGUESSER " -geometry 100x30 -e "sudo apt install sidguesser"'
    )
        os.system("clear")
        if os.path.isfile('/usr/bin/sidguess'):
            print(B('sidguesser Installed'))
        else:
            print(R('sidguesser Not Installed'))
        input()
    back()
        # end sidguesser

# SIPArmyKnife
def SIPArmyKnife():
    if os.path.isfile('/usr/bin/siparmyknife'):
        os.system('clear')
        print(B('tool Available'))
        input()
        # back()
    else:
        os.system(
            'xterm -T " INSTALL SIPARMYKNIFE " -gemoetry 100x30 -e "sudo apt install siparmyknife"'
        )
        os.system("clear")
        if os.path.isfile('/usr/bin/siparmyknife'):
            print(B('siparmyknife Installed'))
        else:
            print(R('siparmyknife Not Installed'))
        input()
    back()
        # end siparmyknife

# sqlmap
def sqlmap():
    if os.path.isfile('/usr/bin/sqlmap'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        # back()
    else:
        os.system(
            'xterm -T " INSTALL SQLMAP " -geometry 100x30 -e "sudo apt install sqlmap"'
        )
        os.system("clear")
        if os.path.isfile('/usr/bin/sqlmap'):
            print(B('sqlmap Installed'))
        else:
            print(R('sqlmap Not Installed'))
        input()
    back()
        # end sqlmap

# sqlninja
def sqlninja():
    if os.path.isfile('/usr/bin/sqlninja'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        # back()
    else:
        os.system(
            'xterm -T " INSTALL SQLNINJA " -geometry 100x30 -e "sudo apt install sqlninja"'
        )
        os.system("clear")
        if os.path.isfile('/usr/bin/sqlninja'):
            print(B('sqlninja Installed'))
        else:
            print(R('sqlninja Not Installed'))
        input()
    back()

# sqlsus
def sqlsus():
    if os.path.isfile('/usr/bin/sqlsus'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        # back()
    else:
        os.system(
            'xterm -T " INSTALL SQLSUS " -geometry 100x30 -e "sudo apt install sqlsus"'
        )
        os.system("clear")
        if os.path.isfile('/usr/bin/sqlsus'):
            print(B('sqlsus Installed'))
        else:
            print(R('sqlsus Not Installed'))
        input()
    back()
        # end sqlsus

# THC-IPV6
def thc_ipv6():
    if os.path.isfile('/usr/bin/'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        # back()
    else:
        os.system(
            'xterm -T " INSTALL THC-IPV6 " -geometry 100x30 -e "sudo apt install "'
        )
        os.system("clear")
        if os.path.isfile('/usr/bin/thc-ipv6'):
            print(B('thc-ipv6 Installed'))
        else:
            print(R('thc-ipv6 Not Installed'))
        input()
    back()
        # end THC-IPV6

# tnscmd10g
def tnscmd10g():
    if os.path.isfile('/usr/bin/tnscmd10g'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        # back()
    else:
        os.system(
            'xterm -T " INSTALL TNSCMD10G " -geometry 100x30 -e "sudo apt install tnscmd10g"'
        )
        os.system("clear")
        if os.path.isfile('/usr/bin/tnscmd10g'):
            print(B('tnscmd10g Installed'))
        else:
            print(R('tnscmd10g Not Installed'))
        input()
    back()
        # end tnscmd10g

# unix-privesc-check
def unix():
    if os.path.isfile('/usr/bin/unix'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL UNIX-PRIVESC-CHECK " -geometry 100x30 -e "sudo apt install unix"'
        )
        os.system("clear")
        if os.path.isfile('/usr/bin/unix-privesc-check'):
            print(B('unix-privesc-check Installed'))
        else:
            print(R('unix-privesc-check Not Installed'))
        input()
        back()
        # end unix-privesc-check

# Yersinia
def Yersinia():
    if os.path.isfile('/usr/bin/yersinia'):
        os.system('clear')
        print(B('Tool Available'))
        input()
        back()
    else:
        os.system(
            'xterm -T " INSTALL  " -geometry 100x30 -e "sudo apt install yersinia"'
        )
        os.system("clear")
        if os.path.isfile('/usr/bin/yersinia'):
            print(B('Yersinia Installed'))
        else:
            print(R('Yersinia Not Installed'))
        input()
        back()
        # end yersinia

def back():
    VulnAs()
